<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>渗透测试 on x7peeps</title>
    <link>https://x7peeps.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/index.html</link>
    <description>Recent content in 渗透测试 on x7peeps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://x7peeps.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>web应用渗透测试方法论</title>
      <link>https://x7peeps.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://x7peeps.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA/index.html</guid>
      <description>WEB应用程序渗透测试方法论 指导思想：方法论中一系列任务根据他们之间的逻辑依赖关系组织和排序。实际上，渗透测试过程往往需要发挥自己的想象，思考可采取的攻击方向，并根据所发现的有关目标应用程序的信息指导攻击方向。
某一个阶段收集到的信息有助于返回到 前一个阶段，以设计更具有针对性的攻击。
在应用程序的某个区域发现的一个关键漏洞可简化对另一个区域的攻击。
一些区域的测试结果有助于确定在其他区域可立即探查出的重复出现的漏洞模式。
一般规范：适用于所有必须测试的区域以及需要采用的各种技巧 假设需要在咨询工作中采用这种方法，渗透测试员应当首先确定测试范围，明确了解测试包含的主机名、URL与功能以及允许执行的测试类型是否存在任何限制。还应当向应用程序所有者告知对一个“黑盒”目标实施任何渗透测试包含的内在风险，并建议他们在开始测试前备份所有重要数据。
一些字符在HTTP请求（HTTP请求头）的不同部分具有特殊的含义。应对这些字符进行URL编码，以确保应用程序按照想要的方式解释这些字符。 &amp;amp;用于分隔URL查询字符串与消息主体中的参数。要插入一个&amp;amp;字符，必须将其编码为%26. =用于分隔URL查询字符串与消息主体中每个参数的名称和值。要插入一个字面量=字符，必须将其编码为%3d. ?用于标记URL查询字符串的起始位置。要插入一个字面量？字符，必须将其编码为%3f。 空格用于在请求的第一行标记URL的结束位置，并可用于在cookie消息头中表示一个cookie值结束。要插入一个字面变量空格字符，必须将其编码为%20或+。 +表示一个编码的空格，要插入一个字面量+字符，必须将其编码为%2b ;用于在cookie消息头中分隔单个cookie。要插入一个字面量;字符，必须将其编码为%3b #用于在URL中标记片段标识符。如果在浏览器的URL中输入这个字符，它会传给服务器的URL截短。要插入一个字面量#字符，必须将其编码为%23。 %在URL编码方案中作为前缀。要插入一个字面量%字符，必须将其编码为%25。 空字节和换行符等，非打印字符必须使用他们的ASCII字符代码进行URL编码。空字节和换行符的编码分别为%00和%0a。 2. 表单中输入URL编码的数据通常会导致浏览器执行另一层编码。例如，在表单中提交%00可能会导致向服务器发送值%2500。为此，通常最好在拦截代理服务器中查看最终请求。 3. 许多查找常见Web应用程序的测试需要发送各种专门设计的输入字符串，并监控应用程序响应，从中搜索表示漏洞存在的反常现象。判断漏洞存在不应仅判断正向特征，还应包含反向特征比对多角度确认，有时候，无论是否提交某个特定漏洞的触发器，应用程序对一个特殊请求的响应都将包含这个漏洞的签名。只要提交专门设计的特殊输入导致了与某个漏洞相关的行为（如一个特殊的错误消息），应该重新核查，确定在相关参数中提交良性输入是否也会造成相同的行为。 4. 前一个请求数据的返回状态会对接下来的请求以及返回造成影响。有时，当调查一个尚未确定的漏洞并隔离某一个反常行为的根源时，必须避免任何收集到的状态信息造成的影响。通常，使用一个新的浏览器进程开始另一个会话，再使用良性请求导航至观测到发生反常的位置，然后重新提交专门设计的输入，即可。还可以对请求中包含的cookie和缓存信息进行调整，重复利用这种方法。此外，还可以使用burp reqeater等工具隔离一个请求。 5. 一些应用程序使用一种负载平衡的配置，其中连续的HTTP请求可能会被不同的后端服务器在Web层，展现层，数据层或其它层处理。不同服务器在配置上的细微差异可能会影响到处理结果。另外，一些成功的攻击将改变处理请求的某一台服务器的状态，例如在web根目录上创建一个新的文件。为隔离特殊操作造成的影响，可能需要连续提交几个相同的请求，测试每个请求的结果，直到请求被相关服务器处理。 1. 解析应用程序内容 1.1 搜索可见的内容 配置浏览器。BURP、webscarab监控抓包。 如果有用，配置浏览器，使用一个扩展监控和分析被浏览器处理的HTTP与HTML内容。 burp 以常规方式浏览整个应用程序，访问发现的每一个连接和URL,提交每一个表单并执行全部多阶段功能。尝试在JS激活与禁用，Cookie激活与禁用情况下浏览。许多应用程序能够处理各种浏览器配置，渗透测试员可以获得应用程序内的不同内容和代码路径。 如果应用程序使用身份验证，并且渗透测试员已经拥有或可以建立一个登陆账户，那么他应具有账户访问保护功能。 当浏览、监控通过拦截代理服务器的请求与响应时，了解被提交的数据种类，了解客户端如何控制服务器端应用程序的行为。 检查被动抓取生成的站点地图，确定任何尚未使用浏览器访问到的内容或功能。根据抓取结果，确定发现每一项内容的位置。使用浏览器访问以上内容，以便爬虫解析服务器的响应，确定其他任何内容。重复执行上述步骤，知道无法确定其他内容或功能。 完成手动浏览和被动抓取后，可以用一组发现的URL作为种子，使用爬虫抓取应用程序。有时，这样可发现其他在手动浏览时忽略的内容。在进行自动抓取前，首先应确定任何危险的或可能会中断应用程序会话的URL，并配置爬虫，将他们排除在抓取范围之外。 1.2 浏览公共资源 使用因特网搜索引擎和历史档案确定他们编入索引或保存与目标应用程序有关的内容。 使用高级搜索选项提高搜索的效率。例如，在Google中，可以使用site:获取所有与目标站点有关的内容；使用link：获取连接到目标站点的其他站点。如果搜索过程中找到现有应用程序已经删除的内容，仍然可以从搜索引擎的缓存中查看这些内容。这些已被删除的内容中可能包含尚未删除的其他资源的连接。 搜索在应用程序内容，【如联系信息，姓名，身份证号，邮件，地址】。除web搜索外还应进行新闻和分组搜索。在论坛中寻找与目标应用程序及其支持基础架构有关的所有技术信息。 检查已发布的任何WSDL(web服务描述性语言)文件，以生成应用程序可能采用的功能名称和参数值列表。 1.3 发现隐藏的内容 确定应用程序如何处理访问不存在的资源请求。手动提出请求，访问一致有效和无效的资源，比较应用程序对这些请求的响应，找到确定资源不存在的简单方法。 获取常见文件与目录名以及常见的文件扩展名列表。根据存在的名猜测推测可能存在的页面。 审查所有客户端代码，确定任何与服务器端内容（包括html注释和禁用的表单元素）有关的线索。 使用自动化技巧，根据目录名，文件名以及文件扩展名列表大量请求，监控应用的响应，确定存在的可访问的内容。 以枚举内容和模式作为用户指导的抓取以及自动化深入搜索的基础，重复进行内容查找。 1.4 查找默认的内容 针对web服务器运行nikto，探查所有默认或抑制存在的内容。使用nikto的选项提高探查效率。例如，使用-root选项制定查找默认内容的目录，或者使用-404选项指定一个标识定制化“文件未发现”页面的字符串。 手动核查所有可能有用的发现，减少探查结果中的错误警报。 请求服务器的根目录，在host消息头中指定IP地址，确定应用程序是否使用任何不同的内容作出响应。如果是，则针对该IP地址及服务器名称运行Nikto扫描。 向服务器的根目录提出请求，指定一系列User-Agent消息头。 1.5 枚举标识符指定的功能 确定任何通过在请求参数中提交一个功能标识符，访问特殊应用程序功能的情况。传参的参数进行猜测确定。 对用于访问单项功能的机制，应用内容查找技巧。例如，如果应用程序使用一个包含功能名称的参数，首先应该确定指定无效功能时应用程序的行为，设法找到一个确定被请求的功能缺失有效的简单方法。列出常用的功能名称或遍历所使用的标识符的语法范围。使枚举有效功能的操作自动化，使其尽可能迅速高效地完成。 如果适用，根据功能路径而非URL编制一副应用程序内容地图，列出所有枚举出的功能和逻辑路径以及他们之间的依赖关系。 1.6 调试参数 选择一个或几个使用隐藏调试参数（如debug=true)的应用程序页面功能。他们最有可能出现在登录、搜索、文件上传或下载等关键功能中。 使用常用调试参数名（如debug、test、hide和source）与常用参数值（如true、yes、on和1）列表，排出这些名称与值的全部组合，向每一个目标功能提交每个名称参数值对。对于POST请求，在URL查询字符串和请求主体中提交参数。Burp Intruder可以实现自动化。 在应用程序的响应中查找任何表示添加的参数对应用程序的行为造成影响的反常现象。 2. 分析应用程序 2.</description>
    </item>
  </channel>
</rss>